
# ---------------------------------------------------------------
import streamlit as st
from pathlib import Path
import numpy as np
import pandas as pd
import joblib

# ---------- –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---------------------------
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π",
    page_icon="‚ù§Ô∏è",
    layout="centered",
)

# ---------- –ó–∞–≥–æ–ª–æ–≤–æ–∫/–æ–ø–∏—Å–∞–Ω–∏–µ ---------------------------------
st.title("‚ù§Ô∏è‚Äçü©π –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π")

st.markdown(
    """
–í –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ **¬´–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å¬ª**.
–ê–ª–≥–æ—Ä–∏—Ç–º –≤–µ—Ä–Ω—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞–ª–∏—á–∏—è/—Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.
""",
    unsafe_allow_html=True,
)

# ---------- –°–∞–π–¥–±–∞—Ä: –≤–≤–æ–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ----------------------------
with st.sidebar:
    st.header("üîé –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")

    age       = st.slider("–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)", 18, 100, 45)
    sex       = st.selectbox("–ü–æ–ª", ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"])
    cp        = st.selectbox(
        "–¢–∏–ø –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏",
        [
            "–ë–µ—Å—Å–∏–º–ø—Ç–æ–º–Ω–∞—è (0)",
            "–ê—Ç–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è (1)",
            "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è (2)",
            "–¢–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è (3)",
        ],
    )
    trestbps  = st.slider("–ê–î –≤ –ø–æ–∫–æ–µ (–º–º —Ä—Ç. —Å—Ç.)", 80, 200, 120)
    chol      = st.slider("–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω (mg/dl)", 100, 600, 200)
    fbs       = st.radio("–ì–ª—é–∫–æ–∑–∞ –Ω–∞—Ç–æ—â–∞–∫ > 120 mg/dl", ["–ù–µ—Ç", "–î–∞"])
    restecg   = st.selectbox(
        "–≠–ö–ì-–ø–æ–∫–æ—è",
        ["–ù–æ—Ä–º–∞–ª—å–Ω–∞—è (0)", "ST-T –∞–Ω–æ–º–∞–ª–∏—è (1)", "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è –õ–ñ (2)"],
    )
    thalach   = st.slider("–ú–∞–∫—Å. –ß–°–°", 60, 220, 150)
    exang     = st.radio("–°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ", ["–ù–µ—Ç", "–î–∞"])
    oldpeak   = st.slider("–°–¥–≤–∏–≥ ST (–º–º)", 0.0, 6.2, 1.0, step=0.1)
    slope     = st.selectbox(
        "–ù–∞–∫–ª–æ–Ω ST-—Å–µ–≥–º–µ–Ω—Ç–∞", ["–í–≤–µ—Ä—Ö (0)", "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ (1)", "–í–Ω–∏–∑ (2)"]
    )
    ca        = st.selectbox("–ö—Ä—É–ø–Ω—ã–µ —Å–æ—Å—É–¥—ã (0-4)", list(range(5)))
    thal      = st.selectbox(
        "–¢–∞–ª–ª–∏–π-—Ç–µ—Å—Ç",
        ["–ù–æ—Ä–º–∞–ª—å–Ω—ã–π (1)", "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç (2)", "–û–±—Ä–∞—Ç–∏–º—ã–π –¥–µ—Ñ–µ–∫—Ç (3)"],
    )

    predict_btn = st.button("üí° –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True)

# ---------- –ö—ç—à-–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ --------------------------------
@st.cache_resource(show_spinner=False)
def load_model(model_path: str = "rs2.pkl"):
    return joblib.load(Path(__file__).parent / model_path)

# ---------- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ -----------------------------
def build_features_df(model):
    """–§–æ—Ä–º–∏—Ä—É–µ–º DataFrame c —Ç–æ—á–Ω–æ —Ç–µ–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª—å ¬´–∂–¥—ë—Ç¬ª."""
    raw = {
        "age": age,
        "sex": 1 if sex == "–ú—É–∂—á–∏–Ω–∞" else 0,
        "trestbps": trestbps,
        "chol": chol,
        "fbs": 1 if fbs == "–î–∞" else 0,
        "thalach": thalach,
        "exang": 1 if exang == "–î–∞" else 0,
        "oldpeak": oldpeak,
        "ca": ca,
        "cp": ["–ë–µ—Å—Å–∏–º–ø—Ç–æ–º–Ω–∞—è (0)",
               "–ê—Ç–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è (1)",
               "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è (2)",
               "–¢–∏–ø–∏—á–Ω–∞—è —Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è (3)"].index(cp),
        "restecg": ["–ù–æ—Ä–º–∞–ª—å–Ω–∞—è (0)",
                    "ST-T –∞–Ω–æ–º–∞–ª–∏—è (1)",
                    "–ì–∏–ø–µ—Ä—Ç—Ä–æ—Ñ–∏—è –õ–ñ (2)"].index(restecg),
        "slope": ["–í–≤–µ—Ä—Ö (0)", "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ (1)", "–í–Ω–∏–∑ (2)"].index(slope),
        "thal": ["–ù–æ—Ä–º–∞–ª—å–Ω—ã–π (1)",
                 "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç (2)",
                 "–û–±—Ä–∞—Ç–∏–º—ã–π –¥–µ—Ñ–µ–∫—Ç (3)"].index(thal) + 1,
    }

    df = pd.DataFrame([raw])

    # One-hot –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö
    cat_cols = ["cp", "restecg", "slope"]
    df = pd.get_dummies(df, columns=cat_cols, prefix=cat_cols)

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫
    feat_cols = model.feature_names_in_
    df = df.reindex(columns=feat_cols, fill_value=0)

    return df

# ---------- –ü—Ä–æ–≥–Ω–æ–∑ --------------------------------------------
if predict_btn:
    model = load_model()
    X_df  = build_features_df(model)
    proba_vec = model.predict_proba(X_df.values)[0]

    # ¬´–ë–æ–ª–µ–∑–Ω—å¬ª —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–µ—Ç–∫–æ–π 1, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–∞—è –µ—Å—Ç—å –≤ classes_,
    # –∏–Ω–∞—á–µ 0 (–Ω–∞ —Å–ª—É—á–∞–π –∏–Ω–≤–µ—Ä—Å–∏–∏ –º–µ—Ç–æ–∫)
    disease_label = 1 if 1 in model.classes_ else 0
    disease_idx   = list(model.classes_).index(disease_label)
    prob = proba_vec[disease_idx] * 100  # %

    st.markdown("---")
    st.subheader(f"ü©∫ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: **{prob:.3f}%**")
    st.progress(min(prob, 100) / 100)

    if prob >= 50:
        st.error(
            "‚ÄºÔ∏è –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ ‚Äî –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞.",
            icon="‚ö†Ô∏è",
        )
    elif prob >= 20:
        st.warning(
            "–í–æ–∑–º–æ–∂–µ–Ω —Ä–∏—Å–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.",
            icon="üîç",
        )
    else:
        st.success("–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ø–æ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º.", icon="‚úÖ")

# ---------- –§—É—Ç–µ—Ä ----------------------------------------------
st.markdown(
    """
    <div style='text-align:center; margin-top:2em; font-size:0.85em; color:gray;'>
      –°–¥–µ–ª–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é ‚ù§Ô∏èMouissat Rabah  ¬∑ –ú–æ–¥–µ–ª—å&nbsp;SVM&nbsp;+&nbsp;StandardScaler
    </div>
    """,
    unsafe_allow_html=True,
)
